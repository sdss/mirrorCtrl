KeysDictionary("mirror", (1,0), *(
    Key("text",
        String(),
        help = "Text message",
    ),
    Key("yourUserID",
        Int(),
        help = "Your user ID number; use this to recognize replies triggered by your commands; never 0",
    ),
    Key("numUsers",
        Int(),
        help = "Number of connected users",
    ),
    Key("userInfo",
        Int(help = "user ID"),
        String(help = "socket address"),
        help = "Basic information about one user",
    ),
    Key("unknownCommand",
        String(help = "command verb"),
        help = "The command verb (the first word of your command string) is not supported by this actor",
    ),
    Key("version",
        String(invalid="?"),
        help = "The version of the actor",
    ),
    Key("refCount",
        Int(help = "refcount"),
        String(help = "object"),
        help = "The reference count for an object",
    ),
    Key("galilConState", 
        Enum("Connecting", "Authorizing", "Connected", 
            "Disconnecting", "Disconnected", "Failing", "Failed",
            help = "Connection State"
        ),
        String(help = "Reason"),
        help =  "State of connection to the dev hardware controller. State is one of Connecting, Authorizing, Connected, Disconnecting, Failing, Disconnected or Failed (the states of an RO.Comm.TCPConnection object). <i>Reason</i> is the reason it got to this state ('' if no reason specified), Note: Dev is a placeholder for a device name",
    ),
#     Key("superseded", help = "The command was superseded by some other command"),
#     Key("timeout", help = "The command timed out"),

    Key("desOrient",
        Float(help="piston", units="um"),
        Float(help="x tilt", units="arcsec"),
        Float(help="y tilt", units="arcsec"),
        Float(help="x translation", units="um"),
        Float(help="y translation", units="um"),
        Float(help="z rotation", units="arcsec", invalid="NaN"),
        help = "desired mirror orientation",
    ),
    Key("desOrientAge",
        Float(units = "seconds", invalid="NaN"),
        help = "Elapsed time since a desired orientation was set",
    ),
    Key("cmdMount",
        Float(units="steps", invalid="NaN") * (3,5),
        help = "Commanded mount positions",
    ),
    Key("cmd",
        String(name = "cmdVerb"),
        help = "Current command (verb) executing",
    ),
    Key("maxDuration",
        Float(units = "seconds", invalid="NaN"),
        help = "Maximum amount of time expected for current process",
    ),
    Key("duration",
        Float(units = "seconds", invalid="NaN"),
        help =  "Time spent executing so far",
    ),
    Key("orient",
        Float(help="piston", units="um", invalid="NaN"),
        Float(help="x tilt", units="arcsec", invalid="NaN"),
        Float(help="y tilt", units="arcsec", invalid="NaN"),
        Float(help="x translation", units="um", invalid="NaN"),
        Float(help="y translation", units="um", invalid="NaN"),
        Float(help="z rotation", units="arcsec", invalid="NaN"),
        help = "desired mirror orientation",
    ),
    Key("actMount",
        Float(units = "steps", invalid="NaN") * (3,5),
        help = "The determined via encoder value actuator mount positions",
    ),
    Key("encMount",
        Float(units = "steps", invalid="NaN") * (3,5),
        help = "The measured or actual encoder mount positions",
    ),
    Key("iter",
        UInt(invalid="NaN"),
        help = "Current move iteration"
    ),
    Key("axisHomed",
        Bool('0', '1') * (3,5),
        help = "Axes that are homed",
    ),
    Key("status",
        Bits('stopcode:8', 'statusword:24') * (3,5), # should we breakdown status word into individual bits?
        help = "see http://www.apo.nmsu.edu/Telescopes/HardwareControllers/GalilMirrorControllers.html#StatusWord",
    ),
    Key("maxIter",
        UInt(),
        help = "Maximum allowed iterations for a move",
    ),
    Key("homing",
        Bool('0', '1', invalid="?") * (3,5),
        help = "Axes that are currently homing",
    ),
    Key("unparsedReply",
        String() * (1, 5),
        help = "Display an ignored raw Galil reply",
    ),
    Key("badGalilReply",
        String() * (0,2),
        help = "Parsed Galil reply that confused the actor",
    ),
    Key("gParSoftwareVersion",
        Float(),
        help = "Software Version on Galil",
    ),
    Key("gParNAXES",
        Int(),
        help = "Number of axes (1-6). Note: 3.5m M3 mirror has 6 axes, although only 3 may be used",
    ),
    Key("gParDOAUX",
        Int(),
        help = "If nonzero, status info emitted from aux serial port",
    ),
    Key("gParMOFF",
        Int(),
        help = "Turn off all motors after each move, if nonzero",
    ),
    Key("gParNCORR",
        Int(),
        help = "Number of encoder-based corrections after each move",
    ),
    Key("gParWTIME",
        Float(units = "seconds"),
        help = "Settling time after a move",
    ),
    Key("gParENCTIME",
        Float(units = "seconds"),
        help = "Settling time after a move and after WTIME, before encoders are read",
    ),
    Key("gParLSTIME",
        Float(units = "seconds"),
        help = "Max time required to back out of a limit at low speed",
    ),
    Key("gPar_RNGxdiv2",
        Int() * (3,5),
        help = "Half the negative range in microsteps",
    ),
    Key("gParRNGxdiv2",
        Int() * (3,5),
        help = "Half the positive range in microsteps",
    ),
    Key("gParSPDx",
        Int() * (3,5),
        help = "Max speed, in microsteps/sec",
    ),
    Key("gParHMSPDx",
        Int() * (3,5),
        help = "Max speed for finding home switch, in microsteps/sec",
    ),
    Key("gParACCx",
        Int() * (3,5),
        help = "Acceleration and deceleration of each axis, in microsteps/sec^2",
    ),
    Key("gParMINCORRx",
        Int() * (3,5),
        help = "The min error that will be corrected, 0 means correct any error",
    ),
    Key("gParMAXCORRx",
        Int() * (3,5),
        help = "The max error that will be corrected at the end of a move. Set to 0 if no encoder or no correction is desired",
    ),
    Key("gParST_FSx",
        Int() * (3,5),
        help = "Step resolution, in microsteps per full step. 1 for servo motor",
    ),
    Key("gParMARGx",
        Int() * (3,5),
        help = "Margin between the hard and soft reverse limits, in microsteps",
    ),
    Key("gParINDSEP",
        Int() * (3,5),
        help = "If this axis has an index pulse encoder and it is used for homing, then set to the separation between index pulses in microsteps",
    ),
    Key("gParENCRESx",
        Float() * (3,5),
        help = "Resolution of encremental auxiliary encoder in ticks per microstep, 0 if no encoder",
    ),
))
